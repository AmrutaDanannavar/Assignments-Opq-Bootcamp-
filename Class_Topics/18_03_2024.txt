
Searching in hashing is easy 
 time complexity of searching using hashing is O(1)
 
 ex 1: 
 //first non-repeating  element
 //timecomplixity O(N) 
function firstNonRepeating(arr) {
    const occurrences = {};
    for (const element of arr) {
        occurrences[element] = (occurrences[element] || 0) + 1; // if element not present 
    }
    console.log( occurrences); //{ '1': 1, '2': 2, '3': 2, '4': 1, '5': 1 }
	
    for (let i = 0; i < arr.length; i++) {
        if ( occurrences[arr[i]] === 1) {
            return arr[i];
        }
    }
    return null;
}

const array = [3,1,3,4,2,2,5];
const firstNonRepeatingElement = firstNonRepeating(array);
console.log("First non-repeating element:", firstNonRepeatingElement); // output : 1

ex 2:
//given an array check if any sub array  has sum =0
//Time complexity of this if O(N^2)
function sumOfAllSubarrays(arr) {
    let count = 0;
    for (let i = 0; i < arr.length; i++) {
        let subArraySum = 0;
        for (let j = i; j < arr.length; j++) {
            subArraySum += arr[j];
            if (subArraySum === 0) {
                return true;
            }
        }
    }
    return false;
}
const array = [2, 2, 1, , -3, 4, 1, -2, -3, 2];
console.log(sumOfAllSubarrays(array)); // Output: true

ex 3:
// given N array elements calculate number of unique elements in every window of size 'k;
where arr = [2,4,3,8,9,4,9,4,10] k=3
output =[3,3,3,3,2,2,3]

function countUniqueElementsInWindows(arr, k) {
    const res = [];
    for (let i = 0; i <= arr.length - k; i++) {
        const window = arr.slice(i, i + k);  // element of last index is not included
        console.log(window);
        const uniqueCount = countUnique(window); // calling countunique function 
        res.push(uniqueCount); 
    }
    return res
}
function countUnique(arr) {
    const unique = new Set(arr); // set will store only unique elemnts
    return unique.size; 
}
const arr = [2, 4, 3, 8, 9, 4, 9, 4, 10];
const k = 3;
const output = countUniqueElementsInWindows(arr, k);
console.log( output); // output: [ 3,3,3,3,2,2,3]


/* console.log(window)
[ 2, 4, 3 ]
[ 4, 3, 8 ] 
[ 3, 8, 9 ] 
[ 8, 9, 4 ] 
[ 9, 4, 9 ] 
[ 4, 9, 4 ] 
[ 9, 4, 10 ]

*/
   
ex 4:
// printinh duplicate letters 
function countOccurrences(sentence) {
    const occurrences = {};
    
    // Count occurrences of each element
    for (const letter of sentence) {
        occurrences[letter] = (occurrences[letter] || 0) + 1; // if element not present 
    }//occurrences[element] =0, if present then occurrences[element]= 1
    
   console.log(occurrences);
   for (const letter in occurrences) {
    if (occurrences[letter] > 1) {
        console.log( letter);
    }
}

}

const sent  = "hello word";
const result = countOccurrences(sent);

output 
{ h: 1, e: 1, l: 2, o: 2, ' ': 1, w: 1, r: 1, d: 1 }
l
o

ex 5:
// deleting duplicate 
function deleteduplicateLetters(sent) {
    let charMap = {};
    let result = '';

    for (let i = 0; i < sent.length; i++) {
        let char = sent[i];

        if (!charMap[char]) { // letter not present 
            charMap[char] = true;
            result += char;  // if it is not present then add it to result
        }
    }

    return result;
}

let sent = "hello word";
let result = deleteduplicateLetters(sent);
console.log(result); // Output: "helo wrd"
 

 