  Bit operations 
  
  
1) AND Truth table (A&B)
 
| A | B | A & B |
|---|---|-------|
| 0 | 0 |   0   |
| 0 | 1 |   0   |
| 1 | 0 |   0   |
| 1 | 1 |   1   |

2) OR truth table (A|B)
| A | B | A | B |
|---|---|---|---|
| 0 | 0 | 0 | 0 |
| 0 | 1 | 0 | 1 |
| 1 | 0 | 1 | 0 |
| 1 | 1 | 1 | 1 |

3) XOR Truth table (A^B)
| A | B | A ^ B |
|---|---|-------|
| 0 | 0 |   0   |
| 0 | 1 |   1   |
| 1 | 0 |   1   |
| 1 | 1 |   0   |

Decimal to binary 
  To get binary of  Decimal number divide that number by 2 
   ex : 25 
   25/2= 12 --- reminder 1
   12/2= 6 ----- reminder 0
   6/2=3 ---- reminder 0
   3/2=1----- reminder 1
    so binary of 25 is = 11001
	
Binary to decimal 
  ex : 11001 
      1*2^4+1*2^3+0*2^2+0*2^1+1*2^0 
      =16+8+0+0+1
      =25

 Important Charateristics 

1) a& 1= 0 if even , 1 if odd 
2) a&a = a
3) a|a = a
4) a ^a = 0
5) a&0 = 0
6) a| 0 = a 
7) a^0 = a 
8) a&b=b&a
9) a&(b&c)=(b&a)&c
10)left shift a<<n = a*2^n
      	      10<<2 = 10*2^2=10*4=40
11) right shift a>> n =a/2^n
                10>>2 =10/2^2=10/4=2.5=2	

ex 1) Given N number where each number is occuring two times except on number
      find that number
     arr = [1,1,2,2,5,3,3]
	 
	 function findSingleNumber(array ) {
    let result = 0;
    for (let i=0;i<=array.length;i++) {
        result ^= array[i];
    }
    return result;
   }
  const numbers = [1,1,2,2,5,3,3];
  console.log("The number occurring only once is:", findSingleNumber(numbers)); // Output: 5
  
  ex 2) given number a and i check if ith bit of 'a' is set or not ?
   
function isBitSet(a, i) {
  
    let mask = 1 << i;
    
    // Bitwise AND operation to check if the ith bit is set
    // If the result is non-zero, then the bit is set
    if ((a & mask) === mask) {
        console.log("bit is set ") ;
    } else {
        console.log("bit is not set");
    }
}


const number = 25; // Example number bonary value 11001
const bitIndex = 4; // Example bit index (0-based)
const isSet = isBitSet(number, bitIndex);
 //out put:bit is set 

ex 3) count number of set bits in a number 'a' 

 N=21  10101=3 
 N = 25 11001 =3 
 
 function countSetBits(number) {
    let count = 0;
    while (number) {
        count += number & 1;
        number >>= 1;
    }
    return count;
}


const num = 25; // Binary representation: 11001
console.log("Number of set bits:", countSetBits(num)); // Output: 3

  
     	 

