
1) height of tree
class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function heightOfBinaryTree(root) {
    if (root === null) {
        return -1; // Height of an empty tree is -1
    } else {
        const leftHeight = heightOfBinaryTree(root.left);
        const rightHeight = heightOfBinaryTree(root.right);
        return Math.max(leftHeight, rightHeight) + 1;
    }
}

const root = new Node(1);
root.left = new Node(5);
root.right = new Node(6);
root.right.left = new Node(7);
root.right.right = new Node(8);

console.log("Height of the binary tree:", heightOfBinaryTree(root)); //2

2) Size of a binary tree

class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function sizeOfBinaryTree(root) {
    if (root === null) {
        return 0; 
    } else {
        const leftSize = sizeOfBinaryTree(root.left);
        const rightSize = sizeOfBinaryTree(root.right);
        return leftSize + rightSize + 1; 
    }
}


const root = new Node(1);
root.left = new Node(5);
root.right = new Node(6);
root.right.left = new Node(7);
root.right.right = new Node(8);

console.log("Size of the binary tree:", sizeOfBinaryTree(root));//5

3)sum of all nodes of binary tree
class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function sumOfNodes(root) {
    if (root === null) {
        return 0; 
    } else {
        const leftSum = sumOfNodes(root.left);
        const rightSum = sumOfNodes(root.right);
        return root.data + leftSum + rightSum; 
    }
}

const root = new Node(1);
root.left = new Node(5);
root.right = new Node(6);
root.right.left = new Node(7);
root.right.right = new Node(8);

console.log("Sum of all nodes in the binary tree:", sumOfNodes(root));//27

Binary Search Tree (BST):

In a binary search tree:

1.Each node has at most two children: a left child and a right child.
2.For any given node, all nodes in its left subtree have values less than its own value.
3.For any given node, all nodes in its right subtree have values greater than its own value.
4.The left and right subtrees of each node are also binary search trees. 

ex :1
        5
       / \
      3   8
     / \ / \
    2  4 7  9
           /
          6

ex :2
        8
       / \
      3   10
     / \    \
    1   6    14
       / \   /
      4   7 13


