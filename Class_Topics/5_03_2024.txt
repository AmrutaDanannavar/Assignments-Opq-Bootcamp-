

 continue time complexity concept 
 
 1) sum of natural numbers 
   1+2+---------(n+1)= n*(n+1)/2
   1+2+---------(n-1)=n*(n-1)/2
   
   [1,10] - including 1and 10
   (1,10] - including 10 and excluding 1
   [1,10) - including 1 and excluding 10
   (1,10) - excluding both 1&10
   
   
  *) [a,b] number of elements between a&b 
      b-a+1
	  
  *) [a,b)&(a,b] number of elements between a&b
       b-a
	   
  *) (a,b) number of elements between a&b
      b-a-1  
   
   
   log2 of any number that will give number of divisions to reach 1
     a^m=n
	 loga(n)=m 
	 log2(8)=3  2^3=8
	 
	 
	 ex1) 
	 let i = n
	 while (i>1){
	 i=i/2
	 }
	 time complexity  above code is = log2(n)
	 
	 ex2)
	 let i=3
	 while(i>1){
	 i=i/3
	 }
	 time complexity  above code is =log3(3)
	 
	 ex3)
	 for(let i=1;i<=n;i=i+2){
	 //statements
	 }
	 when n is odd (n+1)/2 times loop will run
	 when n is even (n/2) times loop will run
	 
	 ex4) 
	  for(let i=1;i<=n;i=i+3){
	 //statements
	 }
	 when n is odd (n+1)/3 times loop will run
	 when n is even (n/3) times loop will run
	 
	 ex5)
	 for(let i=1;i<=n;i=i*3){
	 //statements
	 }
	 time complexity = O(logN)
	 
	 ex6)
	 for(let i=1;i<=n;i++){
	   for(let j=1;j<=n;j++){
	    //statements
	   }
	 }
	 time complexity = O(N)
	 
	 ex7)
	 for(let i=1;i<=n;i++){
	   for(let j=1;j<=i;j++){
	    //statements
	   }
	 }
	 time complexity = O(N^2)
	 
	 
	 logN< sqt(N)< N < NlogN < Nsqt(N) < N^2 < N^3